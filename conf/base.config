/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/ausargph Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    A 'blank slate' config file, appropriate for general use on most high performance
    compute environments. Assumes that all software is installed and available on
    the PATH. Runs in `local` mode - all jobs will be run on the logged in environment.
----------------------------------------------------------------------------------------
*/


params {
    trimmomatic_clean_minlength = 36
    trimmomatic_clean_trail = 3
    trimmomatic_clean_head = 3
    trimmomatic_clean_qual = 15
    
    fastq_suffix = "fastq"
    trinity_normalize_reads = false
    trinity_processed_header = "contig"
    blat_parser_match = 80
    blat_parser_evalue = 1e-10
    mafft_maxiterate = 1000
    trim_alignment = true

    tree_method = "raxml" //'raxml', 'phyml', 'iqtree'

    trim_alignmet_b1 = 0.5
    trim_alignmet_b2 = 0.85
    trim_alignmet_b3 = 8
    trim_alignmet_b4 = 10
    macse_stop = 10
    macse_program = "refineLemmon"
    trimmed = true
    macse_refine_alignment_optim = 1
    macse_refine_alignment_local_realign_init = 0.1
    macse_refine_alignment_local_realign_dec = 0.1
    macse_refine_alignment_fs = 10
    
    make_rgb_kept_tags = "easy_recip_match,complicated_recip_match"

    minsamp = 2 //4

    tree_method == 'raxml' // 'phyml' 'iqtree'
    raxml_runs = 100

    batching_size=1000

   //Default values for aster parameteres
    aster_args = null
    aster_cpus = 1
    aster_memory = 8.GB
    aster_walltime = 12.h
    //Default values for bbmap_dedupe parameteres
    bbmap_dedupe_args = null
    bbmap_dedupe_cpus = 1
    bbmap_dedupe_memory = 16.GB
    bbmap_dedupe_walltime = 12.h
    //Default values for bbmap_filter parameteres
    bbmap_filter_args = null
    bbmap_filter_cpus = 1
    bbmap_filter_memory = 8.GB
    bbmap_filter_walltime = 12.h
    bbmap_filter_minid = 0.75
    bbmap_filter_mem = 2
    
    //Default values for bbmap_reformat parameteres
    bbmap_reformat_args = null
    bbmap_reformat_cpus = 1
    bbmap_reformat_memory = 8.GB
    bbmap_reformat_walltime = 12.h
    
    //Default values for bbmap_reformat_z parameteres
    bbmap_reformat_z_args = null
    bbmap_reformat_z_cpus = 1
    bbmap_reformat_z_memory = 8.GB
    bbmap_reformat_z_walltime = 12.h
    bbmap_reformat_minconsecutivebases = 100
    bbmap_reformat_dotdashxton = true
    bbmap_reformat_fastawrap = 32000

    //Default values for blat parameteres
    blat_args = null
    blat_cpus = 1
    blat_memory = 8.GB
    blat_walltime = 12.h
    //Default values for sed parameteres
    sed_args = null
    sed_cpus = 1
    sed_memory = 8.GB
    sed_walltime = 12.h
    //Default values for concatenate parameteres
    concatenate_args = null
    concatenate_cpus = 1
    concatenate_memory = 8.GB
    concatenate_walltime = 12.h
    //Default values for convert_phyml parameteres
    convert_phyml_args = null
    convert_phyml_cpus = 1
    convert_phyml_memory = 8.GB
    convert_phyml_walltime = 12.h
    //Default values for gblocks parameteres
    gblocks_args = null
    gblocks_cpus = 1
    gblocks_memory = 8.GB
    gblocks_walltime = 12.h
    //Default values for iqtree parameteres
    iqtree_args = null
    iqtree_cpus = 1
    iqtree_memory = 8.GB
    iqtree_walltime = 12.h
    //Default values for macse parameteres
    macse_args_refine = null
    macse_args_refineLemmon = null
    macse_args_export = null
    macse_args_align = null
    macse_cpus = 1
    macse_memory = 8.GB
    macse_walltime = 12.h
    //Default values for mafft parameteres
    mafft_args = null
    mafft_cpus = 1
    mafft_memory = 8.GB
    mafft_walltime = 12.h
    //Default values for make_prg parameteres
    make_prg_args = null
    make_prg_cpus = 1
    make_prg_memory = 8.GB
    make_prg_walltime = 12.h
    //Default values for merge_trees parameteres
    merge_trees_args = null
    merge_trees_cpus = 1
    merge_trees_memory = 8.GB
    merge_trees_walltime = 12.h
    //Default values for parse_blat_results parameteres
    parse_blat_results_args = null
    parse_blat_results_cpus = 1
    parse_blat_results_memory = 8.GB
    parse_blat_results_walltime = 12.h
    //Default values for pear parameteres
    pear_args = null
    pear_cpus = 1
    pear_memory = 8.GB
    pear_walltime = 12.h
    //Default values for perl_cleanup parameteres
    perl_cleanup_args = null
    perl_cleanup_cpus = 1
    perl_cleanup_memory = 8.GB
    perl_cleanup_walltime = 12.h
    //Default values for phylogeny_make_alignments parameteres
    phylogeny_make_alignments_args = null
    phylogeny_make_alignments_cpus = 1
    phylogeny_make_alignments_memory = 8.GB
    phylogeny_make_alignments_walltime = 12.h
    //Default values for prepare_adaptor parameteres
    prepare_adaptor_args = null
    prepare_adaptor_cpus = 1
    prepare_adaptor_memory = 8.GB
    prepare_adaptor_walltime = 12.h
    //Default values for prepare_samplesheet parameteres
    prepare_samplesheet_args = null
    prepare_samplesheet_cpus = 1
    prepare_samplesheet_memory = 8.GB
    prepare_samplesheet_walltime = 12.h
    //Default values for preprocessing parameteres
    preprocessing_args = null
    preprocessing_cpus = 1
    preprocessing_memory = 8.GB
    preprocessing_walltime = 12.h
    //Default values for quality_2_assembly parameteres
    quality_2_assembly_args = null
    quality_2_assembly_cpus = 1
    quality_2_assembly_memory = 8.GB
    quality_2_assembly_walltime = 12.h
    //Default values for raxml parameteres
    raxml_args = null
    raxml_cpus = 1
    raxml_memory = 8.GB
    raxml_walltime = 12.h
    //Default values for samplesheet_check parameteres
    samplesheet_check_args = null
    samplesheet_check_cpus = 1
    samplesheet_check_memory = 8.GB
    samplesheet_check_walltime = 12.h
    //Default values for testing parameteres
    testing_args = null
    testing_cpus = 1
    testing_memory = 8.GB
    testing_walltime = 12.h
    //Default values for trimmomatic parameteres
    trimmomatic_args = null
    trimmomatic_cpus = 1
    trimmomatic_memory = 8.GB
    trimmomatic_walltime = 12.h
    //Default values for trimmomatic_clean_pe parameteres
    trimmomatic_clean_pe_args = null
    trimmomatic_clean_pe_cpus = 1
    trimmomatic_clean_pe_memory = 8.GB
    trimmomatic_clean_pe_walltime = 12.h
    //Default values for trimmomatic_clean_se parameteres
    trimmomatic_clean_se_args = null
    trimmomatic_clean_se_cpus = 1
    trimmomatic_clean_se_memory = 8.GB
    trimmomatic_clean_se_walltime = 12.h
    //Default values for trinity parameteres
    trinity_args = null
    trinity_cpus = 1
    trinity_memory = 8.GB
    trinity_walltime = 12.h
    //Default values for trinity_postprocessing parameteres
    trinity_postprocessing_args = null
    trinity_postprocessing_cpus = 1
    trinity_postprocessing_memory = 8.GB
    trinity_postprocessing_walltime = 12.h
   

}


process.ext.fastq_suffix = "${params.fastq_suffix}"

process {

    // TODO nf-core: Check the defaults for all processes
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time   = { check_max( 12.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    // NOTE - Please try and re-use the labels below as much as possible.
    //        These labels are used and recognised by default in DSL2 files hosted on nf-core/modules.
    //        If possible, it would be nice to keep the same label naming convention when
    //        adding in your local modules too.
    // TODO nf-core: Customise requirements for specific processes.
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 20.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
  
   

    ext.args = " "
    withName: 'ASTER' {
        cpus   = { check_max( params.aster_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max( params.aster_memory * task.attempt, 'memory' ) }
        time   = { check_max( params.aster_walltime  * task.attempt, 'time' ) }
        ext.args = params.aster_args == null ? " " : "${params.aster_args}"
    }
    withName: 'BBMAP_DEDUPE' {
        cpus   = { check_max( params.bbmap_dedupe_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max( params.bbmap_dedupe_memory * task.attempt, 'memory' ) }
        time   = { check_max( params.bbmap_dedupe_walltime  * task.attempt, 'time' ) }
        ext.args = " ac=f " 
        
    }

    withName: 'BBMAP_FILTER' {
        cpus   = { check_max( params.bbmap_filter_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max( params.bbmap_filter_memory * task.attempt, 'memory' ) }
        time   = { check_max( params.bbmap_filter_walltime  * task.attempt, 'time' ) }
        ext.args = { params.bbmap_filter_args == null ? " minid=${params.bbmap_filter_minid} " : params.bbmap_filter_args}
    }
    
    withName: 'BBMAP_REFORMAT' {
        cpus   = { check_max( params.bbmap_reformat_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max( params.bbmap_reformat_memory * task.attempt, 'memory' ) }
        time   = { check_max( params.bbmap_reformat_walltime  * task.attempt, 'time' ) }
        ext.args = {params.bbmap_reformat_args == null ? " " : params.bbmap_reformat_args}
    }
    
    withName: 'BBMAP_REFORMAT_Z' {
        cpus   = { check_max( params.bbmap_reformat_z_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max( params.bbmap_reformat_z_memory * task.attempt, 'memory' ) }
        time   = { check_max( params.bbmap_reformat_z_walltime  * task.attempt, 'time' ) }
        ext.args = {params.bbmap_reformat_z_args == null ? " minconsecutivebases=${params.bbmap_reformat_minconsecutivebases} dotdashxton=${params.bbmap_reformat_dotdashxton} fastawrap=${params.bbmap_reformat_fastawrap} " : params.bbmap_reformat_z_args }
    }
    withName: 'BLAT' {
        cpus   = { check_max( params.blat_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max( params.blat_memory * task.attempt, 'memory' ) }
        time   = { check_max( params.blat_walltime  * task.attempt, 'time' ) }
        ext.args = {params.blat_args == null ? " -out=blast8 " : " "}
    }
    

    withName: 'SED' {
        cpus   = { check_max( params.sed_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max( params.sed_memory * task.attempt, 'memory' ) }
        time   = { check_max( params.sed_walltime  * task.attempt, 'time' ) }
        ext.args = { params.sed_args == null ? " " : params.sed_args }
    }
    withName: 'CONCATENATE' {
        cpus   = { check_max( params.concatenate_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max( params.concatenate_memory * task.attempt, 'memory' ) }
        time   = { check_max( params.concatenate_walltime  * task.attempt, 'time' ) }
        ext.args = { params.concatenate_args == null ? " " : params.concatenate_args }
    }
    withName: 'CONVERT_PHYML' {
        cpus   = { check_max( params.convert_phyml_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max( params.convert_phyml_memory * task.attempt, 'memory' ) }
        time   = { check_max( params.convert_phyml_walltime  * task.attempt, 'time' ) }
        ext.args = { params.convert_phyml_args == null ? " " :   params.convert_phyml_args }
    }
    withName: 'GBLOCKS' {
        cpus   = { check_max( params.gblocks_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max( params.gblocks_memory * task.attempt, 'memory' ) }
        time   = { check_max( params.gblocks_walltime  * task.attempt, 'time' ) }
        ext.args = { params.gblocks_args == null ? " -t=DNA -b3=${params.trim_alignmet_b3} -b4=${params.trim_alignmet_b4} -b5=h -p=n " : params.gblocks_args  }
    }
    withName: 'IQTREE' {
        cpus   = { check_max( params.iqtree_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max( params.iqtree_memory * task.attempt, 'memory' ) }
        time   = { check_max( params.iqtree_walltime  * task.attempt, 'time' ) }
        ext.args = { params.iqtree_args == null ? " -m GTRCAT -f a " : " " }
    }
    withName: 'MACSE' {
        cpus   = { check_max( params.macse_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max( params.macse_memory * task.attempt, 'memory' ) }
        time   = { check_max( params.macse_walltime  * task.attempt, 'time' ) }
        ext.macse_args_refine = { params.macse_args_refine == null ? " -stop ${params.macse_stop} -prog refineAlignment " : params.macse_args_refine }
        ext.macse_args_refineLemmon = { params.macse_args_refineLemmon  == null ? " -prog refineAlignment -optim ${params.macse_refine_alignment_optim} -local_realign_init ${params.macse_refine_alignment_local_realign_init} -local_realign_dec ${params.macse_refine_alignment_local_realign_dec} -fs ${params.macse_refine_alignment_fs} " : params.macse_args_refineLemmon }
        ext.macse_args_export = { params.macse_args_export  == null ? " -prog exportAlignment -stop ${params.macse_stop} " : params.macse_args_export }
        ext.macse_args_align = { params.macse_args_align  == null ? "  -prog alignSequences -stop_lr ${params.macse_stop} " : params.macse_args_align } 
    }




    
   
    withName: 'MAFFT' {
        cpus   = { check_max( params.mafft_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max( params.mafft_memory * task.attempt, 'memory' ) }
        time   = { check_max( params.mafft_walltime  * task.attempt, 'time' ) }
        ext.args = { params.mafft_args == null ? " --maxiterate ${params.mafft_maxiterate} --globalpair --adjustdirection --quiet " : params.mafft_args }
    }
    withName: 'MAKE_PRG' {
        cpus   = { check_max( params.make_prg_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max( params.make_prg_memory * task.attempt, 'memory' ) }
        time   = { check_max( params.make_prg_walltime  * task.attempt, 'time' ) }
        ext.args = { params.make_prg_args == null ? " " :  params.make_prg_args  }
    }
        withName: 'MERGE_TREES' {
        cpus   = { check_max( params.merge_trees_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max( params.merge_trees_memory * task.attempt, 'memory' ) }
        time   = { check_max( params.merge_trees_walltime  * task.attempt, 'time' ) }
        ext.args = { params.merge_trees_args == null ? " " : params.merge_trees_args }
    }
    withName: 'PARSE_BLAT_RESULTS' {
        cpus   = { check_max( params.parse_blat_results_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max( params.parse_blat_results_memory * task.attempt, 'memory' ) }
        time   = { check_max( params.parse_blat_results_walltime  * task.attempt, 'time' ) }
        ext.args = { params.parse_blat_results_args == null ? " " : params.parse_blat_results_args }
    }
    withName: 'PEAR' {
        cpus   = { check_max( params.pear_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max( params.pear_memory * task.attempt, 'memory' ) }
        time   = { check_max( params.pear_walltime  * task.attempt, 'time' ) }
        ext.args = { params.pear_args == null ? "  " : params.pear_args }
    }
    withName: 'PERL_CLEANUP' {
        cpus   = { check_max( params.perl_cleanup_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max( params.perl_cleanup_memory * task.attempt, 'memory' ) }
        time   = { check_max( params.perl_cleanup_walltime  * task.attempt, 'time' ) }
        ext.args = { params.perl_cleanup_args == null ? " -pi -w -e \"s/!/N/g;\" " : params.perl_cleanup_args }
    }
    withName: 'PHYLOGENY_MAKE_ALIGNMENTS' {
        cpus   = { check_max( params.phylogeny_make_alignments_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max( params.phylogeny_make_alignments_memory * task.attempt, 'memory' ) }
        time   = { check_max( params.phylogeny_make_alignments_walltime  * task.attempt, 'time' ) }
        ext.args = { params.phylogeny_make_alignments_args == null ? " " : params.phylogeny_make_alignments_args  }
    }
    withName: 'PREPARE_ADAPTOR' {
        cpus   = { check_max( params.prepare_adaptor_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max( params.prepare_adaptor_memory * task.attempt, 'memory' ) }
        time   = { check_max( params.prepare_adaptor_walltime  * task.attempt, 'time' ) }
        ext.args = { params.prepare_adaptor_args == null ? " " : params.prepare_adaptor_args  }
    }
    withName: 'PREPARE_SAMPLESHEET' {
        cpus   = { check_max( params.prepare_samplesheet_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max( params.prepare_samplesheet_memory * task.attempt, 'memory' ) }
        time   = { check_max( params.prepare_samplesheet_walltime  * task.attempt, 'time' ) }
        ext.args = { params.prepare_samplesheet_args == null ? " " : params.prepare_samplesheet_args }
    }
    

    withName: 'PREPROCESSING' {
        cpus   = { check_max( params.preprocessing_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max( params.preprocessing_memory * task.attempt, 'memory' ) }
        time   = { check_max( params.preprocessing_walltime  * task.attempt, 'time' ) }
        ext.args = { params.preprocessing_args == null ? " " : params.preprocessing_args }
    }
    withName: 'QUALITY_2_ASSEMBLY' {
        cpus   = { check_max( params.quality_2_assembly_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max( params.quality_2_assembly_memory * task.attempt, 'memory' ) }
        time   = { check_max( params.quality_2_assembly_walltime  * task.attempt, 'time' ) }
        ext.args = { params.quality_2_assembly_args == null ? " " : params.quality_2_assembly_args  }
    }
    withName: 'RAXML' {
        cpus   = { check_max( params.raxml_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max( params.raxml_memory * task.attempt, 'memory' ) }
        time   = { check_max( params.raxml_walltime  * task.attempt, 'time' ) }
        ext.args = { params.raxml_args == null ? " -m GTRCAT -f a -n " : params.raxml_args  }
    }

    withName: 'SAMPLESHEET_CHECK' {
        cpus   = { check_max( params.samplesheet_check_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max( params.samplesheet_check_memory * task.attempt, 'memory' ) }
        time   = { check_max( params.samplesheet_check_walltime  * task.attempt, 'time' ) }
        ext.args = { params.samplesheet_check_args == null ? " " : params.samplesheet_check_args }
    }
    withName: 'TESTING' {
        cpus   = { check_max( params.testing_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max( params.testing_memory * task.attempt, 'memory' ) }
        time   = { check_max( params.testing_walltime  * task.attempt, 'time' ) }
        ext.args = { params.testing_args == null ? " " : params.testing_args }
    }
    withName: 'TRIMMOMATIC' {
        cpus   = { check_max( params.trimmomatic_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max( params.trimmomatic_memory * task.attempt, 'memory' ) }
        time   = { check_max( params.trimmomatic_walltime  * task.attempt, 'time' ) }
        ext.args = { params.trimmomatic_args == null ? " -phred33 " : params.trimmomatic_args }
    }
    
    withName: 'TRIMMOMATIC_CLEAN_PE' {
        cpus   = { check_max( params.trimmomatic_clean_pe_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max( params.trimmomatic_clean_pe_memory * task.attempt, 'memory' ) }
        time   = { check_max( params.trimmomatic_clean_pe_walltime  * task.attempt, 'time' ) }
        ext.args = { params.trimmomatic_clean_pe_args == null ? " -phred33 LEADING:${params.trimmomatic_clean_head} TRAILING:${params.trimmomatic_clean_trail} SLIDINGWINDOW:4:${params.trimmomatic_clean_qual} MINLEN:${params.trimmomatic_clean_minlength} " : params.trimmomatic_clean_pe_args }
    }
    withName: 'TRIMMOMATIC_CLEAN_SE' {
        cpus   = { check_max( params.trimmomatic_clean_se_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max( params.trimmomatic_clean_se_memory * task.attempt, 'memory' ) }
        time   = { check_max( params.trimmomatic_clean_se_walltime  * task.attempt, 'time' ) }
        ext.args = { params.trimmomatic_clean_se_args == null ? " -phred33 LEADING:${params.trimmomatic_clean_head} TRAILING:${params.trimmomatic_clean_trail} SLIDINGWINDOW:4:${params.trimmomatic_clean_qual} MINLEN:${params.trimmomatic_clean_minlength} " : params.trimmomatic_clean_se_args }
    }

    
   withName: 'TRINITY' {
        cpus   = { check_max( params.trinity_cpus    * task.attempt, 'cpus' ) }
        memory = { check_max( params.trinity_memory * task.attempt, 'memory' ) }
        time   = { check_max( params.trinity_walltime  * task.attempt, 'time' ) }
        ext.args = { [ " ",
                    params.trinity_args == null ? "  --seqType fq --NO_SEQTK " : params.trinity_args, 
                    params.trinity_normalize_reads ? " --normalize_reads" : ""
                   ].join(" ").trim()
        }
        
    }
    
    
    
    
}
